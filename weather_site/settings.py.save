"""
Django settings for weather_site project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# settings.py
import environ  # For reading .env file and managing environment variables
import os
from pathlib import Path



# Initialize django-environ at the TOP
# Define all environment variables with their types and default values.
# If a variable isn't in .env or OS environment, and no default is here, env('VAR') will raise an error.
env = environ.Env(
    DJANGO_DEBUG=(bool, True),  # Default to True for dev if not set in .env
    DJANGO_SECRET_KEY=(str, 'your_default_fallback_secret_key_CHANGE_ME_IN_DOT_ENV'),
    DJANGO_ALLOWED_HOSTS=(list, ['127.0.0.1', 'localhost', 'unfortunateneighbor.com']), # Default for dev
    DJANGO_EMAIL_BACKEND=(str, 'django.core.mail.backends.console.EmailBackend'),
    DATABASE_NAME=(str, 'radar_site_prod_db'),
    DATABASE_USER=(str, 'radar_site_prod'),
    DATABASE_PASSWORD=(str, 'YOUR_DB_PASSWORD_MUST_BE_IN_DOT_ENV'),
    DATABASE_HOST=(str, 'localhost'),
    DATABASE_PORT=(str, '5432'),
    # Alternatively, define DATABASE_URL in .env and use DATABASES = {'default': env.db()} below

    STRIPE_PUBLISHABLE_KEY=(str, ''), 
    STRIPE_SECRET_KEY=(str, ''),
    STRIPE_WEBHOOK_SECRET=(str, ''),
    
    VAPID_PUBLIC_KEY=(str, ''),
    VAPID_ADMIN_EMAIL=(str, 'default_admin@example.com'), # Used in PUSH_NOTIFICATIONS_SETTINGS
    VAPID_PRIVATE_KEY=(str, ''),

    SITE_DOMAIN=(str, 'http://127.0.0.1:8000'),
    CSRF_TRUSTED_ORIGINS_ENV=(list, ['http://127.0.0.1:8000', 'http://localhost:8000', 'https://unfortunateneighbor.com']), # For CSRF

    # Site-wide default location settings
    SITE_DEFAULT_LATITUDE=(float, 36.44),
    SITE_DEFAULT_LONGITUDE=(float, -95.28),
    SITE_DEFAULT_NAME=(str, "Adair, OK (Site Default)")

    

)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # This assumes settings.py is in a subdir of project root

# Attempt to read the .env file from the project root (where manage.py is)
# This path should correctly point to /home/matt/radar_site/.env
dot_env_path = os.path.join(BASE_DIR, '.env') 

if os.path.exists(dot_env_path):
    print(f"INFO [settings.py]: Loading environment variables from: {dot_env_path}")
    environ.Env.read_env(dot_env_path) # Load the .env file
else:
    print(f"WARNING [settings.py]: .env file NOT FOUND at '{dot_env_path}'. Relying on OS environment variables or defaults defined in environ.Env().")


# --- Django Core Settings ---
SECRET_KEY = env('DJANGO_SECRET_KEY')
DEBUG = env('DJANGO_DEBUG')
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS')

# CSRF Trusted Origins (loaded from .env or defaults)
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS_ENV')


# --- Static and Media Files ---
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Your project-level static files
]
# STATIC_ROOT: For 'collectstatic' in production. Nginx will serve from here.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_prod')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles_prod') # Using 'mediafiles_prod' for clarity in production


# --- Push Notifications Settings (VAPID) ---
VAPID_PUBLIC_KEY_FOR_TEMPLATE = env('VAPID_PUBLIC_KEY') # Used in your template
PUSH_NOTIFICATIONS_SETTINGS = {
    "WP_CLAIMS": {
        "sub": f"mailto:{env('VAPID_ADMIN_EMAIL')}"
    },
    "VAPID_PRIVATE_KEY": env("VAPID_PRIVATE_KEY"),
    # "VAPID_PUBLIC_KEY": env("VAPID_PUBLIC_KEY"), # Often passed to frontend, not directly used by django-push-notifications backend for sending
}

EMAIL_BACKEND = env('DJANGO_EMAIL_BACKEND')



# --- Stripe API Keys ---
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET')

# Your debug print for the webhook secret
if STRIPE_WEBHOOK_SECRET and len(STRIPE_WEBHOOK_SECRET) > 20:
    print(f"DEBUG SETTINGS.PY: STRIPE_WEBHOOK_SECRET loaded, starts with '{STRIPE_WEBHOOK_SECRET[:15]}' and ends with '{STRIPE_WEBHOOK_SECRET[-5:]}'.")
else:
    print(f"DEBUG SETTINGS.PY: STRIPE_WEBHOOK_SECRET from env is missing, short, or invalid: '{STRIPE_WEBHOOK_SECRET}'")


# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages',
    'weather.apps.WeatherConfig',
    'accounts',
    'django_extensions',
    'subscriptions',
    'push_notifications', # This should be the app name for django-push-notifications
    'django_q',
    # 'pygrib', # pygrib is a library, not a Django app. Usually not needed in INSTALLED_APPS.
               # Remove this unless you have a specific reason or a django-pygrib wrapper app.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pages.middleware.SiteAnnouncementMiddleware', # Your custom middleware
]

ROOT_URLCONF = 'weather_site.urls' # Assuming 'weather_site' is your project config directory name

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Keep for DEBUG=True context
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'weather.context_processors.navbar_alerts_processor', 
            ],
        },
    },
]

WSGI_APPLICATION = 'weather_site.wsgi.application' # Assuming 'weather_site' is your project config directory name


# --- Database ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DATABASE_NAME'),
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASSWORD'),
        'HOST': env('DATABASE_HOST'),
        'PORT': env('DATABASE_PORT'),
    }
}
# If you prefer DATABASE_URL in your .env file:
# DJANGO_DATABASE_URL="postgres://your_user:your_password@your_host:your_port/your_db_name"
# Then in settings.py:
# DATABASES = {'default': env.db('DJANGO_DATABASE_URL')} # django-environ parses the URL


# --- Password validation ---
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# --- Django Q2 Configuration ---
# Your Q_CLUSTER settings look fine.

Q_CLUSTER = {
    'name': 'DjangORM', 
    'workers': 2, 
    'timeout': 800, 
    'retry': 960, 
    'queue_limit': 50, 
    'bulk': 10, 
    'orm': 'default', 
    'catch_up': True, 
}


# --- Internationalization ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Chicago' # This is good
USE_I18N = True
USE_TZ = True # Good to keep True for timezone-aware datetimes

# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Login/Logout Redirects ---
LOGIN_REDIRECT_URL = '/' 
LOGOUT_REDIRECT_URL = '/'

# --- Site-wide default location ---
SITE_DEFAULT_LATITUDE = env.float('SITE_DEFAULT_LATITUDE')
SITE_DEFAULT_LONGITUDE = env.float('SITE_DEFAULT_LONGITUDE')
SITE_DEFAULT_NAME = env('SITE_DEFAULT_NAME')

# Define SITE_DOMAIN using env() (if not defined earlier)
SITE_DOMAIN = env('SITE_DOMAIN') 
# This is useful for constructing full URLs, e.g., in tasks or emails.


CSRF_COOKIE_SECURE = env.bool('DJANGO_CSRF_COOKIE_SECURE')
SESSION_COOKIE_SECURE = env.bool('DJANGO_SESSION_COOKIE_SECURE')
SECURE_SSL_REDIRECT = env.bool('DJANGO_SECURE_SSL_REDIRECT') 


print(f"FINAL DEBUG SETTING IS: {DEBUG}")
