"""
Django settings for weather_site project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ
from pathlib import Path
import os # Or use pathlib
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Or BASE_DIR / 'media' if using pathlib


# Load .env file variables
load_dotenv(os.path.join(BASE_DIR, '.env')) # Explicitly point to .env file

# ... other settings like SECRET_KEY, DEBUG, ALLOWED_HOSTS ...
VAPID_PUBLIC_KEY_FOR_TEMPLATE = os.getenv('VAPID_PUBLIC_KEY')

# --- DEBUG PRINT for VAPID Keys from .env ---
_vapid_admin_email_from_env = os.getenv('VAPID_ADMIN_EMAIL')
_vapid_private_key_from_env = os.getenv('VAPID_PRIVATE_KEY')
_vapid_public_key_from_env = os.getenv('VAPID_PUBLIC_KEY') # For VAPID_PUBLIC_KEY_FOR_TEMPLATE


PUSH_NOTIFICATIONS_SETTINGS = {
    # This "WP_CLAIMS" key is what django-push-notifications typically looks for.
    "WP_CLAIMS": {
        "sub": f"mailto:{os.getenv('VAPID_ADMIN_EMAIL')}"
    },
    # The VAPID_PRIVATE_KEY should be at this level or the library might
    # also look for it globally as settings.VAPID_PRIVATE_KEY.
    # For django-push-notifications, it often expects it here:
    "VAPID_PRIVATE_KEY": os.getenv("VAPID_PRIVATE_KEY"),

    # Note: The VAPID_PUBLIC_KEY is not directly used by the backend for SENDING pushes.
    # It's used by the frontend to subscribe. pywebpush (used by django-push-notifications)
    # primarily needs the private key and the 'sub' claim for sending.
}

# ... other settings like SECRET_KEY, DEBUG, ALLOWED_HOSTS ...
VAPID_PUBLIC_KEY_FOR_TEMPLATE = os.getenv('VAPID_PUBLIC_KEY')


# --- Stripe API Keys ---
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET') # Add this line
#STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET')
# --- End Stripe Keys ---
if STRIPE_WEBHOOK_SECRET and len(STRIPE_WEBHOOK_SECRET) > 20:
    print(f"DEBUG SETTINGS.PY: STRIPE_WEBHOOK_SECRET is hardcoded to start with '{STRIPE_WEBHOOK_SECRET[:15]}' and end with '{STRIPE_WEBHOOK_SECRET[-5:]}'.")
    print("this is stupid")
else:
    print(f"DEBUG SETTINGS.PY: STRIPE_WEBHOOK_SECRET is missing or too short after hardcoding attempt: '{STRIPE_WEBHOOK_SECRET}'")



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2aj@jzt#-a^$giskk)jm&v9oq37g-cr*+)if1ret3*5gb!^xou'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.5.111', 'unfortunateneighbor.com', 'beta.unfortunateneighbor.com']


# Add your tunnel URL (with https) to the trusted origins list
CSRF_TRUSTED_ORIGINS = [
    'https://unfortunateneighbor.com', # Add the full HTTPS URL
    'https://beta.unfortunateneighbor.com',
    # You might keep these if you also access via http/localhost sometimes
    # 'http://localhost:8000',
    # 'http://127.0.0.1:8000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages',
    'weather.apps.WeatherConfig',
    'accounts',
    'django_extensions',
    'subscriptions',
    'push_notifications',
    'django_q',
    'pygrib',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pages.middleware.SiteAnnouncementMiddleware',
]

ROOT_URLCONF = 'weather_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'weather.context_processors.navbar_alerts_processor', 
            ],
        },
    },
]

WSGI_APPLICATION = 'weather_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'myWeatherApp',         # Same as POSTGRES_DB in docker-compose.yml
        'USER': 'manthe148',      # Same as POSTGRES_USER
        'PASSWORD': 'Harry Potter and the chamber of secrets1!', # Same as POSTGRES_PASSWORD
        'HOST': 'localhost',           # Or '127.0.0.1' because we mapped the port to localhost
        'PORT': '5432',                # Default PostgreSQL port
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Django Q2 Configuration (to use Django ORM as the broker)
Q_CLUSTER = {
    'name': 'DjangORM',      # A name for this cluster configuration
    'workers': 2,           # Number of worker processes to run (2-4 is a good start)
    'timeout': 800,          # Task timeout in seconds before it's considered failed
    'retry': 960,           # How long to wait to retry a failed task (seconds). Must be > timeout.
    'queue_limit': 50,      # Max number of tasks to fetch from DB at once per worker
    'bulk': 10,             # How many tasks a worker will try to process in a batch
    'orm': 'default',       # Crucial: Tells Django Q to use the default Django database
    # Optional:
     'catch_up': True,     # If the cluster was down, process tasks that were scheduled during downtime
    # 'sync': False,        # IMPORTANT: Keep False for asynchronous operation. True is for testing ONLY.
}



# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'


STATICFILES_DIRS = [
    BASE_DIR / 'static',
    # Or using os.path: os.path.join(BASE_DIR, 'static'),
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'  # Redirect to homepage (root URL) after successful login
LOGOUT_REDIRECT_URL = '/' # Redirect to homepage after logout


# Site-wide default location (e.g., Adair, OK)
SITE_DEFAULT_LATITUDE = 36.44
SITE_DEFAULT_LONGITUDE = -95.28
SITE_DEFAULT_NAME = "Adair, OK (Site Default)"
